import java.util.regex.Matcher
import java.util.regex.Pattern

/**
 * Copyright (c) 2024 Apoorv Gupta
 * All rights reserved.
 */
plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.dagger.hilt)
    alias(libs.plugins.jetbrains.kotlin.kapt)
    alias(libs.plugins.compose.compiler)
}

// For the Release build, setup Keystore properties here.
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

// Apply custom configurations from app-flavours.gradle file
apply from: 'app-flavours.gradle'

android {
    // Set the namespace for the application
    namespace 'com.apoorvgupta.newsshots'
    // Set the compile SDK version
    compileSdk BuildConfig.compileSdk

    defaultConfig {
        // Application ID
        applicationId BuildConfig.applicationId
        // Minimum SDK version
        minSdk BuildConfig.minSdk
        // Target SDK version
        targetSdk BuildConfig.targetSdk
        // Version code and version name
        versionCode BuildConfig.versionCode
        versionName BuildConfig.versionName

        // Test instrumentation runner for unit tests
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // Enable vector drawables using the support library
        vectorDrawables {
            useSupportLibrary true
        }

        def currentBuildFlavour = getCurrentFlavor()
        if (currentBuildFlavour.isEmpty()) {
            currentBuildFlavour = "qa"
            // set default value to avoid compilation issue of UnresolvedReference HEAP_ENV_ID, etc.
        }
        print("Current Floavour " + currentBuildFlavour)
        if (currentBuildFlavour.contains("uat")) {
            getProps("./src/configuration/uat.props").each { props ->
                buildConfigField "String", props.key, props.value
            }
        } else if (currentBuildFlavour.contains("qa")) {
            getProps("./src/configuration/qa.props").each { props ->
                buildConfigField "String", props.key, props.value
            }
        } else if (currentBuildFlavour.contains("prod")) {
            getProps("./src/configuration/prod.props").each { props ->
                buildConfigField "String", props.key, props.value
            }
        } else if (currentBuildFlavour.contains("dev")) {
            getProps("./src/configuration/dev.props").each { props ->
                buildConfigField 'String', props.key, props.value
            }
        }
    }

    signingConfigs {
        // This is not the main keystore file which uses to publish app on PlayStore.
        release {
            storeFile file(keystoreProperties['storeFile'])
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            debuggable true
            // Enable Progaurd/R8 for release variants
            minifyEnabled true
            // Shrink Resources for release variants
            shrinkResources true
            // Specify ProGuard files
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // Specify App Signing Config
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        // Set Java source and target compatibility to version 17
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        // Set JVM target version
        jvmTarget = BuildConfig.jvmTarget
    }

    buildFeatures {
        // Enable Compose support
        compose true
        //Enable Build Configs
        buildConfig true
    }

    composeOptions {
        // Set the Kotlin compiler extension version for Compose
        kotlinCompilerExtensionVersion BuildConfig.kotlinCompilerExtensionVersion
    }

    packagingOptions {
        resources {
            // Exclude specific resources from packaging
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    // Core, Capabilities, Feature Modules Integration in the main app
    implementation project(':core')
    implementation project(':capabilities')
    implementation project(':feature-home')
    implementation project(':feature-search')
    implementation project(':feature-bookmark')

    // Material design dependency
    implementation libs.androidx.material3

    // Navigation
    implementation libs.androidx.navigation.compose

    // Dagger Hilt
    implementation libs.hilt.android
    implementation libs.hilt.navigation.compose

    // Firebase
    implementation libs.splash.screen

    kapt libs.hilt.android.compiler
}

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern

    if (tskReqStr.contains("assemble")) // to run ./gradlew assembleRelease to build APK
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else if (tskReqStr.contains("bundle")) // to run ./gradlew bundleRelease to build .aab
        pattern = Pattern.compile("bundle(\\w+)(Release|Debug)")
    else if (tskReqStr.contains("test")) // to run ./gradlew testDebug to test
        pattern = Pattern.compile("test(\\w+)(Release|Debug)")
    else if (tskReqStr.contains("sonarqube"))
        pattern = Pattern.compile("sonarqube")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find() && matcher.groupCount() >= 2)
        return matcher.group(1).toLowerCase()
    else {
        return ""
    }
}

def getProps(path) {
    Properties props = new Properties()
    props.load(new FileInputStream(file(path)))
    return props
}

